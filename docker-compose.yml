version: '3.8'

services:
  db:
    image: postgres:15-alpine # Using version 15 as previously, can be changed to 14 if preferred
    container_name: yourmedia-db # Consistent naming
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-yourmediadb}
      POSTGRES_USER: ${POSTGRES_USER:-yourmediauser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

  redis:
    image: redis:7-alpine # Using version 7 as previously
    container_name: yourmedia-redis
    restart: always
    # volumes: # Redis data persistence is optional, can be added if needed
    #   - redis_data:/data

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yourmedia-backend
    environment:
      DEBUG: ${DEBUG:-False}
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-your_social_media.settings}
      SECRET_KEY: ${SECRET_KEY}
      POSTGRES_DB: ${POSTGRES_DB:-yourmediadb}
      POSTGRES_USER: ${POSTGRES_USER:-yourmediauser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db # Service name from this compose file
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0} # Service name from this compose file
      GROQ_API_KEY: ${GROQ_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      DOMAIN_NAME: ${DOMAIN_NAME:-localhost}
      # ALLOWED_HOSTS, CORS_ALLOWED_ORIGINS, CSRF_TRUSTED_ORIGINS will be managed by settings.py based on DOMAIN_NAME and DEBUG
    volumes:
      - media_files:/app/media
      - static_files:/app/staticfiles # For collected static files
    depends_on:
      - db
      - redis
    restart: always

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yourmedia-celery
    command: ["celery"] # Uses the entrypoint from backend/docker-entrypoint.sh
    environment:
      DEBUG: ${DEBUG:-False}
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-your_social_media.settings}
      SECRET_KEY: ${SECRET_KEY} # Celery workers might need access to Django settings
      POSTGRES_DB: ${POSTGRES_DB:-yourmediadb}
      POSTGRES_USER: ${POSTGRES_USER:-yourmediauser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      GROQ_API_KEY: ${GROQ_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      DOMAIN_NAME: ${DOMAIN_NAME:-localhost}
    volumes:
      - media_files:/app/media # If celery tasks access/write media files directly
      # - ./backend:/app # Optional: for local development to see code changes live
    depends_on:
      - db
      - redis
      - backend # Ensure backend starts its processes first
    restart: always

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost/api} # Default for when Coolify proxy path is /api
    container_name: yourmedia-frontend
    # ports: # Removed - Coolify manages port mapping automatically
    volumes:
      - static_files:/usr/share/nginx/html/static # Nginx serves Django's collected static files
      - media_files:/usr/share/nginx/html/media   # Nginx serves Django's media files
    depends_on:
      - backend
    restart: always

volumes:
  postgres_data: {} # Using {} for default driver, same as null
  # redis_data: {} # Uncomment if you add redis persistence
  media_files: {}
  static_files: {} 