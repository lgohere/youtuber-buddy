"""
Services for content generation using Google Generative AI.
Migrated from original agents/content_generator.py
"""
import os
import logging
import re
from typing import Dict, List, Optional
from dataclasses import dataclass
from django.conf import settings
from django.utils import timezone
import google.generativeai as genai
from .models import ContentGeneration, GeneratedTitle, GeneratedChapter

logger = logging.getLogger(__name__)


@dataclass
class ContentResult:
    """Resultado da gera√ß√£o de conte√∫do"""
    status: str
    content: str
    agent_used: str
    error: Optional[str] = None


class ContentGenerationService:
    """
    Service for generating YouTube content using Google Generative AI
    """
    
    def __init__(self):
        # Configure Google Generative AI
        api_key = settings.GOOGLE_API_KEY
        logger.info(f"[ContentGenerationService] Initializing. Attempting to load GOOGLE_API_KEY.")
        
        # Mask most of the API key for security in logs
        api_key_display = "Not set or empty"
        if api_key: # Check if api_key is not None and not empty
            if len(api_key) > 7: # Standard Google API keys are longer
                api_key_display = f"starts with '{api_key[:4]}', ends with '{api_key[-3:]}', length {len(api_key)}"
            elif len(api_key) > 0:
                api_key_display = f"set, length {len(api_key)} (too short to be a typical Google API key, value: '{api_key[:4]}...')"
            else: # Empty string
                api_key_display = "set, but is an empty string"

        logger.info(f"[ContentGenerationService] Value of settings.GOOGLE_API_KEY: {api_key_display}")

        if api_key: # Check if api_key is not None and not empty string
            logger.info(f"[ContentGenerationService] GOOGLE_API_KEY seems present. Attempting to configure genai.")
            try:
                genai.configure(api_key=api_key) # Use the original api_key variable
                self.model = genai.GenerativeModel('gemini-2.0-flash')
                logger.info("[ContentGenerationService] Gemini Model configured successfully with API key from Django settings.")
            except Exception as e:
                logger.error(f"[ContentGenerationService] Error configuring genai with API key from Django settings: {e}")
                self.model = None
        else:
            logger.error(f"[ContentGenerationService] GOOGLE_API_KEY is missing or empty in Django settings. Cannot configure Gemini.")
            self.model = None
    
    def detect_transcription_language(self, transcription: str) -> str:
        """Detect language of transcription text using OpenAI GPT-4o-mini."""
        try:
            # Check if OpenAI API key is available
            openai_api_key = settings.OPENAI_API_KEY if hasattr(settings, 'OPENAI_API_KEY') else None
            if not openai_api_key:
                logger.warning("OpenAI API key n√£o encontrada, usando portugu√™s por padr√£o")
                return "pt|Portugu√™s (Brasil)"
            
            # Remove timestamps for better language detection
            text_without_timestamps = re.sub(r'^\d{1,2}:\d{2}(?::\d{2})?\s+', '', transcription, flags=re.MULTILINE)
            
            # Get first few lines for analysis
            lines = [line.strip() for line in text_without_timestamps.split('\n') if line.strip()]
            sample_text = ' '.join(lines[:10])  # First 10 lines
            
            logger.info(f"[AGENTE 1 - OpenAI] Detectando idioma do texto: {sample_text[:100]}...")
            
            if len(sample_text) < 50:
                logger.info("[AGENTE 1 - OpenAI] Texto muito curto, retornando portugu√™s por padr√£o")
                return "pt|Portugu√™s (Brasil)"
            
            # Import OpenAI here to avoid import errors if not installed
            import openai
            
            # Configure OpenAI client
            client = openai.OpenAI(api_key=openai_api_key)
            
            # Simple prompt for language detection
            prompt = f"""
Identifique o idioma deste texto. Analise cuidadosamente as palavras.

Texto: {sample_text[:300]}

EXEMPLOS:
- Se cont√©m "Ol√° pessoal", "vamos falar", "bem-vindos", "n√£o", "ent√£o", "tamb√©m" = Portugu√™s (Brasil)
- Se cont√©m "Hello", "everyone", "let's", "the", "and", "very" = English  
- Se cont√©m "Hola", "todos", "vamos a", "tambi√©n", "muy" = Espa√±ol

Responda APENAS no formato: pt|Portugu√™s (Brasil) OU en|English OU es|Espa√±ol"""

            # Call OpenAI API
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um especialista em detec√ß√£o de idiomas. Seja preciso e responda apenas no formato solicitado."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=50,
                temperature=0
            )
            
            detected = response.choices[0].message.content.strip()
            logger.info(f"[AGENTE 1 - OpenAI] Idioma detectado: '{detected}'")
            
            # Validate response format
            if '|' in detected and len(detected.split('|')) == 2:
                code, name = detected.split('|')
                code = code.strip().lower()
                name = name.strip()
                
                # Validate code
                valid_codes = ['pt', 'en', 'es']
                if code in valid_codes:
                    logger.info(f"[AGENTE 1 - OpenAI] ‚úÖ Idioma validado: {code} - {name}")
                    return f"{code}|{name}"
            
            # Fallback to Portuguese
            logger.warning(f"[AGENTE 1 - OpenAI] ‚ö†Ô∏è Resposta inv√°lida: '{detected}', usando portugu√™s por padr√£o")
            return "pt|Portugu√™s (Brasil)"
            
        except Exception as e:
            logger.error(f"[AGENTE 1 - OpenAI] ‚ùå Erro na detec√ß√£o de idioma: {e}")
            return "pt|Portugu√™s (Brasil)"
    
    def _generate_content_sync(self, agent_name: str, prompt: str, lang_code: str = 'pt') -> ContentResult:
        """Generate content using Google Generative AI (synchronous) with detected language."""
        try:
            if not self.model:
                return ContentResult(
                    status="error",
                    content="",
                    agent_used=agent_name,
                    error="Google API n√£o configurada"
                )
            
            logger.info(f"[AGENTE 2 - Gemini] Gerando conte√∫do em IDIOMA: {lang_code}")
            
            # Generate content using Gemini
            response = self.model.generate_content(prompt)
            
            logger.info(f"[AGENTE 2 - Gemini] ‚úÖ Conte√∫do gerado com sucesso")
            
            return ContentResult(
                status="success",
                content=response.text,
                agent_used=agent_name
            )
        except Exception as e:
            # Log the full traceback for detailed error information
            logger.error(f"[AGENTE 2 - Gemini] ‚ùå Erro detalhado ao gerar conte√∫do com {agent_name} (Idioma: {lang_code}):", exc_info=True)
            
            error_message = str(e)
            # Try to get more specific error from Google API if possible
            if hasattr(e, 'args') and e.args:
                if isinstance(e.args[0], str) and 'API key not valid' in e.args[0]:
                    error_message = "API key do Google inv√°lida ou n√£o configurada corretamente."
                elif isinstance(e.args[0], str):
                    error_message = e.args[0]

            return ContentResult(
                status="error",
                content="",
                agent_used=agent_name,
                error=error_message # Ensure error is always a string
            )
    
    def generate_titles(self, transcription_text: str, title_types: Optional[List[str]] = None, use_markdown: bool = False, lang_code: str = 'pt', lang_name: str = 'Portugu√™s (Brasil)') -> ContentResult:
        """Generate optimized YouTube titles using multi-agent system."""
        # title_types logic can remain as is, or be simplified if UI drives the specific list
        # For now, assuming title_types are passed if specific ones are desired (e.g. from ContentGeneration.title_types)
        # or defaults are applied if None.
        
        # AGENTE 1: Language detection is now done before calling this, lang_code and lang_name are passed in.
        # lang_info = self.detect_transcription_language(transcription_text)
        # lang_code, lang_name = lang_info.split('|')
        
        logger.info(f"[SISTEMA MULTI-AGENTES - T√çTULOS] Gerando t√≠tulos em {lang_name} ({lang_code}). Markdown: {use_markdown}")
        
        language_instruction = f"""
üö® GERE TODO O CONTE√öDO EXCLUSIVAMENTE EM {lang_name.upper()} ({lang_code.upper()})
üö® N√ÉO misture idiomas na resposta
üö® Use as palavras e estruturas t√≠picas do {lang_name.upper()}

CONFIRMA√á√ÉO DE IDIOMA DETECTADO:
- C√≥digo: {lang_code}
- Idioma: {lang_name}
- Respons√°vel pela gera√ß√£o: Gemini (Agente 2)
"""
        
        if use_markdown:
            format_instruction = """
FORMATA√á√ÉO DA RESPOSTA:
Use formata√ß√£o Markdown para organizar a resposta:
- **Negrito** para destacar t√≠tulos e palavras-chave importantes
- *It√°lico* para justificativas e explica√ß√µes
- `C√≥digo` para c√≥digos de idioma ou termos t√©cnicos
- Listas numeradas para organizar os tipos de t√≠tulo
- Quebras de linha para melhor legibilidade
"""
        else:
            format_instruction = """
FORMATA√á√ÉO DA RESPOSTA:
Use apenas texto simples, sem formata√ß√£o especial.
Organize de forma clara e leg√≠vel, mas sem usar markdown, negrito, it√°lico ou outros elementos de formata√ß√£o.
"""

        # Consolidate title types for the prompt, if any are specified
        tipos_solicitados_str = "TODOS OS TIPOS ABAIXO"
        if title_types:
            tipos_solicitados_str = ", ".join(title_types)


        prompt = f"""
ü§ñ SISTEMA MULTI-AGENTES - COMUNICA√á√ÉO ENTRE AGENTES:
- AGENTE 1 (OpenAI): Detectou idioma = {lang_code} ({lang_name})
- AGENTE 2 (Gemini): Deve gerar conte√∫do em {lang_name}

INSTRU√á√ïES OBRIGAT√ìRIAS PARA AGENTE 2 (Gemini):
{language_instruction}

{format_instruction}

Voc√™ √© um especialista avan√ßado em YouTube SEO, com profundo conhecimento das melhores pr√°ticas da plataforma.

ESPECIALIZA√á√ÉO EM T√çTULOS:

Analise esta transcri√ß√£o de v√≠deo e gere t√≠tulos otimizados.

TRANSCRI√á√ÉO:
{transcription_text}

TIPOS DE T√çTULO SOLICITADOS: {tipos_solicitados_str}
Gere um t√≠tulo para CADA UM dos tipos solicitados.

Para cada tipo de t√≠tulo, forne√ßa:
- O TIPO DE T√çTULO como um cabe√ßalho (ex: ### T√≠tulo Impactante)
- T√≠tulo sugerido
- Justificativa (por que funciona)
- Palavras-chave utilizadas

DEFINI√á√ïES DOS TIPOS DE T√çTULO (Use estas defini√ß√µes para guiar a gera√ß√£o):
- Impactante: (Objetivo: Usar emo√ß√£o, intensidade e palavras fortes para gerar cliques.) Crie um t√≠tulo impactante com linguagem forte e que gere uma rea√ß√£o emocional no p√∫blico. Use verbos no imperativo e palavras de alto impacto. Exemplo: üëâ Ele Destruiu Tudo em Apenas 5 Minutos!
- Anal√≠tico: (Objetivo: Foca em dados, an√°lises, compara√ß√µes, ideal para v√≠deos informativos ou de opini√£o.) Gere um t√≠tulo com linguagem anal√≠tica, que sugira uma an√°lise profunda ou compara√ß√£o entre dados, fatos ou situa√ß√µes. Exemplo: üìä Por Que Esse Time Est√° Caindo de Produ√ß√£o? An√°lise Completa
- Agressivo: (Objetivo: Estilo direto, provocativo, √≥timo para v√≠deos de opini√£o, cr√≠tica ou pol√™mica.) Crie um t√≠tulo agressivo com tom provocativo ou de confronto. Ideal para v√≠deos que geram debate ou indigna√ß√£o. Exemplo: üî• Esse Jogador N√ÉO PODE Mais Ser Titular!
- Nicho: (Objetivo: Usa termos que s√≥ quem √© do nicho entende, criando senso de pertencimento.) Crie um t√≠tulo usando express√µes, termos t√©cnicos ou memes espec√≠ficos do nicho do v√≠deo. P√∫blico-alvo: pessoas que j√° conhecem o tema. Exemplo (futebol): ‚öΩ Esse Cara √â o Novo "Camisa 10 Raiz"?
- Engajamento: (Objetivo: Estimula coment√°rios, opini√µes e compartilhamentos.) Gere um t√≠tulo que convide o p√∫blico a dar sua opini√£o, usar perguntas ou temas divisivos. Exemplo: üí¨ Quem Foi o Melhor em Campo? Deixe Sua Opini√£o!
- Curiosidade: (Objetivo: Deixa um mist√©rio no ar, sem revelar o desfecho.) Crie um t√≠tulo que desperte curiosidade extrema, fazendo o p√∫blico querer descobrir o que acontece. Evite entregar tudo no t√≠tulo. Exemplo: ‚ùì Voc√™ N√£o Vai Acreditar no Que Aconteceu no Final‚Ä¶
- SEO Cl√°ssico: (Objetivo: Focado em otimiza√ß√£o, com palavra-chave + tema central.) Crie um t√≠tulo claro, direto, com as principais palavras-chave para ranqueamento no YouTube. Ideal para v√≠deos evergreen e did√°ticos. Exemplo: üîç Como Funciona o VAR no Futebol Brasileiro
- Storytelling: (Objetivo: Introduz uma hist√≥ria ou uma jornada (√≥timo para vlogs, bastidores, narrativas).) Crie um t√≠tulo que pare√ßa o come√ßo de uma hist√≥ria real, com in√≠cio, conflito e expectativa de resolu√ß√£o. Exemplo: üìΩÔ∏è Tudo Deu Errado no Meu Primeiro Dia no Novo Clube‚Ä¶
- Shorts: (Objetivo: T√≠tulos curtos, diretos, com punch inicial.) Gere um t√≠tulo com at√© 50 caracteres, estilo viral, para v√≠deos curtos do YouTube Shorts. Exemplo: ‚ö° Ele Gritou Isso no Meio do Treino!
- Live/Podcast: (Objetivo: Com nomes + tema + tom de conversa.) Crie um t√≠tulo com o nome dos participantes + o assunto principal + tom convidativo para assistir uma conversa. Exemplo: üéôÔ∏è Com fulano: Os Bastidores do Mercado da Bola

IMPORTANTE: 
- Retorne APENAS os t√≠tulos organizados conforme solicitado
- N√ÉO inclua explica√ß√µes introdut√≥rias como "Here are some suggestions" ou "Okay, I understand"
- V√° direto ao conte√∫do solicitado
- Gere t√≠tulos seguindo exatamente os tipos solicitados EM {lang_name.upper()}
- Se "shorts" for solicitado, o t√≠tulo deve ter no m√°ximo 50 caracteres"""
        
        return self._generate_content_sync(
            agent_name="youtube_titulo_specialist",
            prompt=prompt,
            lang_code=lang_code
        )

    def generate_description(self, transcription_text: str, description_type: str = "anal√≠tica", use_markdown: bool = False, lang_code: str = 'pt', lang_name: str = 'Portugu√™s (Brasil)') -> ContentResult:
        """Generate optimized YouTube description using multi-agent system."""
        
        logger.info(f"[SISTEMA MULTI-AGENTES - DESCRI√á√ÉO] Gerando descri√ß√£o tipo '{description_type}' em {lang_name} ({lang_code}). Markdown: {use_markdown}")

        language_instruction = f"""
üö® GERE TODO O CONTE√öDO EXCLUSIVAMENTE EM {lang_name.upper()} ({lang_code.upper()})
üö® N√ÉO misture idiomas na resposta
üö® Use as palavras e estruturas t√≠picas do {lang_name.upper()}

CONFIRMA√á√ÉO DE IDIOMA DETECTADO:
- C√≥digo: {lang_code}
- Idioma: {lang_name}
- Respons√°vel pela gera√ß√£o: Gemini (Agente 2)
"""
        
        if use_markdown:
            format_instruction = """
FORMATA√á√ÉO DA RESPOSTA:
Use formata√ß√£o Markdown para organizar a resposta com estrutura clara e profissional.
"""
        else:
            format_instruction = """
FORMATA√á√ÉO DA RESPOSTA:
Use apenas texto simples, sem formata√ß√£o especial.
"""

        prompt = f"""
ü§ñ SISTEMA MULTI-AGENTES - COMUNICA√á√ÉO ENTRE AGENTES:
- AGENTE 1 (OpenAI): Detectou idioma = {lang_code} ({lang_name})
- AGENTE 2 (Gemini): Deve gerar conte√∫do em {lang_name}

INSTRU√á√ïES OBRIGAT√ìRIAS PARA AGENTE 2 (Gemini):
{language_instruction}

{format_instruction}

Voc√™ √© um especialista em SEO para YouTube, com dom√≠nio total das estrat√©gias que maximizam o alcance, reten√ß√£o e engajamento dos v√≠deos na plataforma.

ESPECIALIZA√á√ÉO EM DESCRI√á√ïES:

Analise esta transcri√ß√£o de v√≠deo e gere uma descri√ß√£o otimizada.

TRANSCRI√á√ÉO:
{transcription_text}

TIPO DE DESCRI√á√ÉO SOLICITADA: {description_type.upper()}
Use a defini√ß√£o abaixo para guiar a gera√ß√£o da descri√ß√£o:

DEFINI√á√ïES DOS TIPOS DE DESCRI√á√ÉO:
- Anal√≠tica: (Foco: Explica√ß√µes, detalhes e argumentos.) Escreva uma descri√ß√£o com tom anal√≠tico e informativo. Estruture os par√°grafos com clareza, aprofunde nos temas discutidos no v√≠deo, destaque dados, an√°lises ou conclus√µes. Ideal para v√≠deos de opini√£o, not√≠cias, an√°lises t√°ticas, conte√∫do educacional.
- Curiosidade (Gera Curiosidade): (Foco: Prender o p√∫blico com perguntas e mist√©rio.) Escreva uma descri√ß√£o com foco em curiosidade. Fa√ßa perguntas ao leitor, insinue reviravoltas, crie expectativa sobre o conte√∫do do v√≠deo sem entregar todos os detalhes. Utilize frases com mist√©rio e mantenha o leitor intrigado.
- Hashtags (Resumida e Focada em Hashtags): (Foco: SEO + uso forte de tags.) Gere uma descri√ß√£o curta, direta e com alto volume de hashtags otimizadas para SEO. Inclua apenas uma introdu√ß√£o objetiva (1-2 linhas) sobre o tema, seguida de hashtags relevantes e estrat√©gicas para posicionamento.
- T√≥picos: (Foco: Organiza√ß√£o e escaneabilidade.) Escreva a descri√ß√£o em formato de t√≥picos com marcadores claros (bullet points, emojis ou tra√ßos). Liste os assuntos principais tratados no v√≠deo e utilize palavras-chave em cada ponto. Ideal para v√≠deos com conte√∫do diversificado ou did√°tico.
- Gatilhos (Gatilhos de Curiosidade): (Foco: Emocional + incentivo ao clique.) Crie uma descri√ß√£o com gatilhos mentais como "voc√™ vai se surpreender", "ningu√©m te contou isso", "n√£o cometa esse erro" ou "o que ningu√©m esperava aconteceu". Use frases curtas e com ritmo acelerado, focando no lado emocional do espectador.
- Engajamento (Focada em Engajamento): (Foco: Convers√£o e a√ß√µes do p√∫blico.) Escreva uma descri√ß√£o persuasiva, com v√°rios CTAs ao longo do texto. Pe√ßa explicitamente para o p√∫blico curtir, se inscrever, ativar o sininho, comentar, compartilhar e salvar o v√≠deo. Pode incluir perguntas diretas ao p√∫blico para estimular coment√°rios.

ESTRUTURA OBRIGAT√ìRIA (exceto para tipo 'Hashtags'):
- Resumo instigante (primeiras 2-3 linhas)
- Desenvolvimento do tema conforme o tipo de descri√ß√£o
- Palavras-chave naturalmente inseridas
- Call-to-action no final (se aplic√°vel ao tipo)
- Quebras de linha para escaneabilidade

IMPORTANTE:
- Retorne APENAS a descri√ß√£o conforme solicitado
- N√ÉO inclua explica√ß√µes introdut√≥rias ou coment√°rios adicionais
- V√° direto ao conte√∫do da descri√ß√£o
- Gere a descri√ß√£o EM {lang_name.upper()}"""
        return self._generate_content_sync(
            agent_name=f"youtube_description_specialist_{description_type}",
            prompt=prompt,
            lang_code=lang_code
        )

    def generate_chapters(self, transcription_text: str, num_chapters: int = 6, use_markdown: bool = False, lang_code: str = 'pt', lang_name: str = 'Portugu√™s (Brasil)') -> ContentResult:
        """Generate YouTube chapters using multi-agent system."""

        logger.info(f"[SISTEMA MULTI-AGENTES - CAP√çTULOS] Gerando {num_chapters} cap√≠tulos em {lang_name} ({lang_code}). Markdown: {use_markdown}")
        
        language_instruction = f"""
üö® GERE TODO O CONTE√öDO EXCLUSIVAMENTE EM {lang_name.upper()} ({lang_code.upper()})
üö® N√ÉO misture idiomas na resposta
üö® Os t√≠tulos dos cap√≠tulos devem ser concisos e no idioma {lang_name.upper()}
"""
        # Formatting instruction for chapters is subtly different (less emphasis on bold/italics, more on list structure)
        if use_markdown: # Markdown for chapters often means just the timestamp and title
            format_instruction = """
FORMATA√á√ÉO DA RESPOSTA:
Liste os cap√≠tulos no formato:
0:00 T√≠tulo Conciso do Cap√≠tulo 1
1:23 T√≠tulo Conciso do Cap√≠tulo 2
...
Use formata√ß√£o Markdown para organizar os cap√≠tulos de forma clara, mas os t√≠tulos dos cap√≠tulos em si devem ser texto simples.
"""
        else: # Plain text for chapters
            format_instruction = """
FORMATA√á√ÉO DA RESPOSTA:
Liste os cap√≠tulos no formato:
0:00 T√≠tulo Conciso do Cap√≠tulo 1
1:23 T√≠tulo Conciso do Cap√≠tulo 2
...
Use apenas texto simples, sem formata√ß√£o especial.
"""
        prompt = f"""
ü§ñ SISTEMA MULTI-AGENTES - COMUNICA√á√ÉO ENTRE AGENTES:
- AGENTE 1 (OpenAI): Detectou idioma = {lang_code} ({lang_name})
- AGENTE 2 (Gemini): Deve gerar conte√∫do em {lang_name}

INSTRU√á√ïES OBRIGAT√ìRIAS PARA AGENTE 2 (Gemini):
{language_instruction}

{format_instruction}

Voc√™ √© um especialista em estrutura√ß√£o de conte√∫do para YouTube, especializado em criar cap√≠tulos (timestamps) que melhoram a experi√™ncia do usu√°rio e o engajamento do v√≠deo.

ESPECIALIZA√á√ÉO EM CAP√çTULOS:

Analise esta transcri√ß√£o com timestamps e crie cap√≠tulos otimizados:

TRANSCRI√á√ÉO COM TIMESTAMPS:
{transcription_text}

N√öMERO DE CAP√çTULOS SOLICITADO: {num_chapters}

REGRAS:
- Usar timestamps exatos da transcri√ß√£o (formato 0:00, 1:34, 2:47)
- Crie EXATAMENTE {num_chapters} cap√≠tulos. Se necess√°rio, agrupe partes menores para formar blocos mais coesos ou divida blocos maiores.
- T√≠tulos curtos e objetivos para cada cap√≠tulo (m√°ximo 5-6 palavras)
- Evitar frases completas nos t√≠tulos dos cap√≠tulos
- Facilitar navega√ß√£o r√°pida e melhorar SEO interno

IMPORTANTE:
- Retorne APENAS a lista de cap√≠tulos no formato solicitado
- N√ÉO inclua explica√ß√µes introdut√≥rias ou coment√°rios adicionais
- V√° direto aos cap√≠tulos
- Gere os cap√≠tulos EM {lang_name.upper()}, seguindo os timestamps existentes, com t√≠tulos curtos e objetivos"""
        return self._generate_content_sync(
            agent_name="youtube_chapters_specialist",
            prompt=prompt,
            lang_code=lang_code
        )

    def process_content_generation(self, content_generation: ContentGeneration) -> bool:
        """Process content generation request."""
        logger.info(f"[PROCESS_CONTENT_GENERATION] Starting for ID: {content_generation.id}, User: {content_generation.user}, Type: '{content_generation.content_type}', Markdown: {content_generation.use_markdown}")
        logger.info(f"[PROCESS_CONTENT_GENERATION] Title types: {content_generation.title_types}, Desc type: {content_generation.description_type}, Max chapters: {content_generation.max_chapters}")

        transcription_text = content_generation.transcription.transcription_text
        if not transcription_text:
            content_generation.status = 'failed'
            content_generation.error_message = "Transcri√ß√£o n√£o encontrada ou vazia."
            content_generation.save()
            logger.error(f"[PROCESS_CONTENT_GENERATION] Failed for ID: {content_generation.id}. Transcription text is missing.")
            return False

        content_generation.status = 'processing'
        content_generation.save()

        # Detect language ONCE for all sub-generations if not already detected from transcription
        # Or, prefer the language detected by the transcription process itself if available
        lang_code_name_str = content_generation.transcription.language_detected
        
        if not lang_code_name_str or '|' not in lang_code_name_str:
            # If transcription didn't detect language or format is wrong, detect it now.
            logger.info(f"[PROCESS_CONTENT_GENERATION] Language not found or invalid in transcription ({lang_code_name_str}). Detecting language for ContentGeneration ID: {content_generation.id}")
            lang_code_name_str = self.detect_transcription_language(transcription_text)
            # Save newly detected language to the ContentGeneration model as well
            content_generation.language_detected = lang_code_name_str 
            content_generation.save() # Save immediately
            logger.info(f"[PROCESS_CONTENT_GENERATION] Language detected and set: {lang_code_name_str} for ContentGeneration ID: {content_generation.id}")
        else:
            logger.info(f"[PROCESS_CONTENT_GENERATION] Using language from transcription: {lang_code_name_str} for ContentGeneration ID: {content_generation.id}")

        try:
            lang_parts = lang_code_name_str.split('|')
            if len(lang_parts) == 2:
                lang_code, lang_name = lang_parts[0].strip(), lang_parts[1].strip()
            else: # Fallback if split doesn't work as expected
                logger.warning(f"[PROCESS_CONTENT_GENERATION] Invalid language format '{lang_code_name_str}', defaulting to Portuguese.")
                lang_code, lang_name = 'pt', 'Portugu√™s (Brasil)'
                content_generation.language_detected = "pt|Portugu√™s (Brasil)" # Correct the stored format
                content_generation.save()
        except Exception as e:
            logger.error(f"[PROCESS_CONTENT_GENERATION] Error splitting language string '{lang_code_name_str}': {e}. Defaulting to Portuguese.")
            lang_code, lang_name = 'pt', 'Portugu√™s (Brasil)'
            content_generation.language_detected = "pt|Portugu√™s (Brasil)" # Correct the stored format
            content_generation.save()


        generated_outputs = []
        final_error_message = ""
        overall_success = True
        
        # Determine which parts to generate based on content_type and specific fields
        # The UI has checkboxes for "Gerar T√≠tulos", "Gerar Descri√ß√£o", "Gerar Cap√≠tulos"
        # These are reflected in the `content_type` field and specific option fields.
        
        generate_titles_flag = False
        generate_description_flag = False
        generate_chapters_flag = False

        if content_generation.content_type == 'complete':
            # For 'complete', we only generate content for which specific options are provided
            # This allows users to select which parts they want in the complete package
            
            logger.info(f"[COMPLETE PACKAGE] Processing complete package for ID: {content_generation.id}")
            logger.info(f"[COMPLETE PACKAGE] title_types: {content_generation.title_types}")
            logger.info(f"[COMPLETE PACKAGE] description_type: {content_generation.description_type}")
            logger.info(f"[COMPLETE PACKAGE] max_chapters: {content_generation.max_chapters}")
            
            # Generate titles if title_types is provided (not None and not empty list)
            if content_generation.title_types is not None and len(content_generation.title_types) > 0:
                generate_titles_flag = True
                logger.info(f"[COMPLETE PACKAGE] Will generate titles with types: {content_generation.title_types}")
            
            # Generate description if description_type is provided
            if content_generation.description_type:
                generate_description_flag = True
                logger.info(f"[COMPLETE PACKAGE] Will generate description of type: {content_generation.description_type}")
                
            # Generate chapters if max_chapters is provided and > 0
            if content_generation.max_chapters is not None and content_generation.max_chapters > 0:
                generate_chapters_flag = True
                logger.info(f"[COMPLETE PACKAGE] Will generate {content_generation.max_chapters} chapters")
        elif content_generation.content_type == 'titles':
            generate_titles_flag = True
        elif content_generation.content_type == 'description':
            generate_description_flag = True
        elif content_generation.content_type == 'chapters':
            generate_chapters_flag = True

        # 1. Generate Titles if requested
        if generate_titles_flag:
            logger.info(f"[PROCESS_CONTENT_GENERATION - {content_generation.content_type.upper()}] Attempting to generate titles.")
            titles_result = self.generate_titles(
                transcription_text,
                title_types=content_generation.title_types if content_generation.title_types else None, # Pass existing list or None
                use_markdown=content_generation.use_markdown,
                lang_code=lang_code,
                lang_name=lang_name
            )
            if titles_result.status == "success":
                generated_outputs.append(f"--- T√çTULOS GERADOS ---\n{titles_result.content}")
                # Logic to save individual GeneratedTitle objects would go here
                # For now, adding to the main content field for simplicity in this refactor
            else:
                overall_success = False
                error_msg_title = f"Falha ao gerar t√≠tulos: {titles_result.error or 'Erro desconhecido'}"
                final_error_message += error_msg_title + "\\n"
                logger.error(f"[PROCESS_CONTENT_GENERATION - {content_generation.content_type.upper()}] Titles result: Status {titles_result.status}, Error: {titles_result.error}")
                generated_outputs.append(error_msg_title)

        # 2. Generate Description if requested
        if generate_description_flag:
            # Use the specific description_type chosen by the user
            desc_type_to_generate = content_generation.description_type or "anal√≠tica" # Default if somehow empty
            logger.info(f"[PROCESS_CONTENT_GENERATION - {content_generation.content_type.upper()}] Attempting to generate description type: {desc_type_to_generate}.")
            description_result = self.generate_description(
                transcription_text,
                description_type=desc_type_to_generate,
                use_markdown=content_generation.use_markdown,
                lang_code=lang_code,
                lang_name=lang_name
            )
            if description_result.status == "success":
                generated_outputs.append(f"--- DESCRI√á√ÉO - {desc_type_to_generate.upper()} ---\n{description_result.content}")
            else:
                overall_success = False
                error_msg_desc = f"Falha ao gerar descri√ß√£o ({desc_type_to_generate}): {description_result.error or 'Erro desconhecido'}"
                final_error_message += error_msg_desc + "\\n"
                logger.error(f"[PROCESS_CONTENT_GENERATION - {content_generation.content_type.upper()}] Description result for {desc_type_to_generate}: Status {description_result.status}, Error: {description_result.error}")
                generated_outputs.append(error_msg_desc)
        
        # 3. Generate Chapters if requested
        if generate_chapters_flag:
            num_chapters_to_generate = content_generation.max_chapters or 6 # Default if somehow empty
            logger.info(f"[PROCESS_CONTENT_GENERATION - {content_generation.content_type.upper()}] Attempting to generate {num_chapters_to_generate} chapters.")
            chapters_result = self.generate_chapters(
                transcription_text,
                num_chapters=num_chapters_to_generate,
                use_markdown=content_generation.use_markdown,
                lang_code=lang_code,
                lang_name=lang_name
            )
            if chapters_result.status == "success":
                generated_outputs.append(f"--- CAP√çTULOS GERADOS ({num_chapters_to_generate} cap√≠tulos) ---\n{chapters_result.content}")
                # Logic to save individual GeneratedChapter objects would go here
            else:
                overall_success = False
                error_msg_chap = f"Falha ao gerar cap√≠tulos: {chapters_result.error or 'Erro desconhecido'}"
                final_error_message += error_msg_chap + "\\n"
                logger.error(f"[PROCESS_CONTENT_GENERATION - {content_generation.content_type.upper()}] Chapters result: Status {chapters_result.status}, Error: {chapters_result.error}")
                generated_outputs.append(error_msg_chap)

        if not generate_titles_flag and not generate_description_flag and not generate_chapters_flag:
            logger.warning(f"[PROCESS_CONTENT_GENERATION] No specific content parts were requested for generation ID: {content_generation.id} with content_type '{content_generation.content_type}'. This might indicate an issue with how content_type is set or interpreted.")
            # If it's not 'complete' and no specific type matches, it's an unhandled case or an error.
            if content_generation.content_type not in ['titles', 'description', 'chapters', 'complete']:
                 final_error_message += f"Tipo de conte√∫do '{content_generation.content_type}' n√£o manipulado."
                 overall_success = False


        content_generation.generated_content = "\\n\\n".join(generated_outputs)
        
        if overall_success and generated_outputs: # Ensure something was actually generated
            content_generation.status = 'completed'
            content_generation.error_message = None
            logger.info(f"[PROCESS_CONTENT_GENERATION] Result set to SUCCESS for ID: {content_generation.id}")
        elif not generated_outputs and overall_success: # No errors, but nothing generated (e.g. 'complete' but no options chosen)
            content_generation.status = 'failed' # Or perhaps 'completed_empty' / 'completed_with_warnings'
            content_generation.error_message = "Nenhum conte√∫do foi solicitado para gera√ß√£o ou as op√ß√µes n√£o foram configuradas."
            logger.warning(f"[PROCESS_CONTENT_GENERATION] No content generated for ID: {content_generation.id}, though no explicit errors occurred. Setting to FAILED.")
        else: # Some error occurred
            content_generation.status = 'failed'
            content_generation.error_message = final_error_message.strip()
            logger.error(f"[PROCESS_CONTENT_GENERATION] Result set to FAILED for ID: {content_generation.id}. Errors: {final_error_message.strip()}")

        content_generation.completed_at = timezone.now()
        content_generation.save()
        
        logger.info(f"[PROCESS_CONTENT_GENERATION] Final check. Result object: {content_generation.status}, Generated outputs count: {len(generated_outputs)}")
        return overall_success and bool(generated_outputs) 